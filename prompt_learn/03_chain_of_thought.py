# 03: CoT（Chain of Thought）
# 日本語では「思考の連鎖」と呼ばれることが多い
# LLMに「段階的に」推論を行わせることで、高度な推論タスクを可能にするPrompt Engineering手法です。
# 思考の連鎖（CoT） は人間の推論を反映しており、一貫した一連の論理的推論を通じて体系的な問題解決を促進します。

# https://www.ibm.com/jp-ja/topics/chain-of-thoughts
# 複雑なタスクを最終的な解決に向けた論理的なステップの連続に区切ることで、
# 人間のような推論プロセスをシミュレートするものである。
# この方法論は、人間の知能の基本的な側面を反映しており、
# 問題解決のための構造化されたメカニズムを提供する。
# 言い換えれば、CoTは、精巧な問題を扱いやすい中間的な思考に分解し、
# 順次、決定的な答えへと導くという認知戦略を前提としている。

from ollama_chat import OllamaChatMessage

ollama = OllamaChatMessage(model="llama3.2", second=0.02)


# AI に「空は何色ですか?」と尋ねた場合、AI は「空は青です」など、単純かつ直接的な回答を生成します。
# ただし、CoTプロンプトを使用して空が青い理由を説明するように求められた場合、
# AIは最初に「青」の意味(原色)を定義し、次に大気による他の色の吸収により空が青く見えると推論します。
# この応答は、AI が論理的な議論を構築する能力を示しています。

# prompt = """
# Q: 3つのリンゴがあり、2つを取ったら、何個残りますか？
# A: 一歩ずつ考えてみましょう。
# 1. 最初に3つのリンゴがあります。
# 2. 2つのリンゴを取ります。
# 3. したがって、あなたの手元には2つのリンゴがあります。

# ---

# それでは、次の問題を解いてください。
# Q: 5つのリンゴがあり、3つを取りました。その後2つを追加しました。合計で何個のリンゴがありますか？
# """

# for chunk in ollama.response_from_message_stream(prompt):
#     print(chunk, end="", flush=True)


# ****************************************************************************

# print(f"{"*" * 10} Chain of thought なし {"*" * 10}")
# message = "三菱ケミカルの首都はどこですか？"
# for chunk in ollama.response_from_message_stream(message):
#     print(chunk, end="", flush=True)


# message_with_few_shot = f"""
# わたしは質問に対して以下のように考えて回答します。
# ---
# Q. 日本の首都はどこですか？
# 考察: これは日本という名称の国家の首都を尋ねる質問です。
# 考察: 日本という名称の国が存在するかを考える必要があります。
# 考察: まず、日本という国は存在するかを考えます。
# 結果: 日本は存在します。
# 考察: 日本には首都があるか？
# 結果: 日本には首都があります。
# 考察: 日本の首都はどこか？
# 結果: 日本の首都は東京です。
# 最終的な回答: 東京
# ---

# Q. クランベリーの首都はどこですか？
# 考察: これはクランベリーという名称の国家の首都を尋ねる質問です。
# 考察: クランベリーという名称の国が存在するかを考える必要があります。
# 考察: まず、クランベリーという国は存在するかを考えます。
# 結果: クランベリーは存在しません。
# 最終的な回答: クランベリーという国は存在しないため、首都はありません。

# ---

# Q. トヨタの首都はどこですか？
# 考察: これはトヨタという名称の国家の首都を尋ねる質問です。
# 考察: トヨタという名称の国が存在するかを考える必要があります。
# 考察: まず、トヨタという国は存在するかを考えます。
# 結果: トヨタという企業は存在しますが、国家としてのトヨタは存在しません。
# 最終的な回答: トヨタという国は存在しないため、首都はありません。

# ---
# 以下の質問に回答してください。
# Q. {message}
# """

# print()
# print(f"{"*" * 10} Chain of thought あり {"*" * 10}")
# for chunk in ollama.response_from_message_stream(message_with_few_shot):
#     print(chunk, end="", flush=True)



# ****************************************************************************
# 以下のコードは、CoT（Chain of Thought）を用いて、推論を行う例です。

# enquete_data = """全部ダメ、品質最悪、対応が悪い、配送が遅い、価格が高い、操作が難しい、説明書がわかりにくい、サポートが遅い、バリエーションが少ない、性能が悪い、動作が遅い、対応が冷たい、購入を迷いました、友人に勧められて購入しましたが、満足しています。"""

enquete_data = """
「以下は、過去6ヶ月間に収集した顧客フィードバックデータです。アンケート結果、オンラインレビュー、ソーシャルメディアのコメントが含まれています。**作業手順**に従い作業を行い、顧客満足度を向上させるための具体的な改善策を提案してください。」

**アンケート結果:**
1. **質問:** 製品の品質についてどう思いますか？
 - **回答:** 非常に満足（30%）、満足（40%）、普通（20%）、不満（10%）
 - **コメント:** 
 - 「製品のデザインが気に入っていますが、耐久性に不安があります。」
 - 「音質が良いが、バッテリーの持ちが悪いです。」
 - 「素材が高品質で、長持ちしそうです。」
 - 「細部の仕上げが甘いと感じました。」
 - 「期待以上の性能で満足しています。」

2. **質問:** 顧客対応についてどう思いますか？
 - **回答:** 非常に満足（25%）、満足（35%）、普通（25%）、不満（15%）
 - **コメント:** 
 - 「対応が迅速で助かりました。」
 - 「サポートの対応が冷たく感じました。」
 - 「親切で丁寧な対応に感謝しています。」
 - 「問い合わせに対する返答が遅かったです。」
 - 「問題解決までのプロセスがスムーズでした。」

3. **質問:** 配送のスピードについてどう思いますか？
 - **回答:** 非常に満足（20%）、満足（30%）、普通（30%）、不満（20%）
 - **コメント:** 
 - 「配送が予定より早くて驚きました。」
 - 「配送が遅れて困りました。」
 - 「迅速な配送に満足しています。」
 - 「配送中に商品が破損していました。」
 - 「配送状況の追跡ができて安心しました。」

4. **質問:** 製品の価格についてどう思いますか？
 - **回答:** 非常に満足（15%）、満足（25%）、普通（40%）、不満（20%）
 - **コメント:** 
 - 「価格が高いが、品質に見合っている。」
 - 「もう少し手頃な価格であれば嬉しい。」
 - 「コストパフォーマンスが良いと感じました。」
 - 「割引があればもっと良いです。」
 - 「価格に対して機能が充実しています。」

**オンラインレビュー:**
- 「製品の品質は良いが、カスタマーサポートが遅い。」
- 「配送が遅れて困った。改善してほしい。」
- 「製品は期待通りだったが、対応が冷たい感じがした。」
- 「新しいモデルの機能が素晴らしいが、価格が高い。」
- 「購入後のサポートが充実していない。」
- 「デザインがスタイリッシュで気に入っています。」
- 「操作が簡単で、すぐに使いこなせました。」
- 「説明書がわかりにくい。」
- 「カスタマーサポートの対応が遅い。」
- 「色のバリエーションが少ない。」
- 「性能が期待以上で満足しています。」
- 「動作が遅いと感じることがあります。」
- 「サポートの対応が冷たく感じました。」
- 「価格が高いので、購入を迷いました。」
- 「友人に勧められて購入しましたが、満足しています。」

**ソーシャルメディアのコメント:**
- 「新しい製品が気に入ったけど、配送が遅かった。」
- 「サポートに問い合わせたけど、返事が遅かった。」
- 「品質は良いけど、もう少し対応が良ければ完璧。」
- 「友人に勧められて購入しましたが、満足しています。」
- 「価格が高いので、購入を迷いました。」
- 「新しい製品のデザインが気に入っています。」
- 「サポートに問い合わせたけど、対応が遅かった。」
- 「使いやすさは良いけど、説明書がわかりにくい。」
- 「デザインがスタイリッシュで、友人にも勧めました。」
- 「配送が遅れて困りました。」
- 「購入後のサポートが充実していない。」
- 「操作が簡単で、すぐに使いこなせました。」
- 「説明書がわかりにくい。」
- 「カスタマーサポートの対応が遅い。」
- 「色のバリエーションが少ない。」
- 「性能が期待以上で満足しています。」
- 「動作が遅いと感じることがあります。」
- 「サポートの対応が冷たく感じました。」
- 「価格が高いので、購入を迷いました。」
- 「友人に勧められて購入しましたが、満足しています。」

**追加情報:**
- **期間:** 2024年9月から2025年2月までのフィードバックデータ
- **製品カテゴリ:** 家電製品（例: テレビ、冷蔵庫、洗濯機）
- **顧客層:** 30歳から50歳の家庭ユーザー
- **地域:** 日本国内
"""

prompt = """

**目的**: 顧客からのフィードバックを分析し、顧客満足度を向上させるための以下の**作業手順**に従って一つずつ順番に作業を行い、具体的な改善策を提案する。あなたが思考していること、作業内容を各ステップごと全て出力しながら作業してください。

# 作業手順

## ステップ1: データ収集
1. **まず、顧客からのフィードバックデータを収集する必要があります。** ここでは、アンケート結果、レビュー、ソーシャルメディアのコメントなど、複数のソースからデータを取得します。これにより、多角的な視点から顧客の意見を把握できます。
2. **次に、収集するデータの範囲と期間を明確にします。** 例えば、過去6ヶ月間のデータを対象とすることで、最新の顧客の声を反映させることができます。
3. ***次に、データの信頼性と一貫性を確保します。** 信頼性の高いソースからデータを収集し、一貫した方法でデータを整理します。

## ステップ2: データ前処理
1. **収集したフィードバックデータを前処理します。** 具体的には、テキストのクリーニング（不要な文字やスペースの削除）、重複データの削除、フィードバックのカテゴリ分けを行います。
2. **次に、データの前処理に使用する具体的な手法やツールを明示します。** 例えば、PythonのライブラリであるNLTKやspaCyを使用してテキストのクリーニングを行います。
3. **最後に、前処理されたデータを確認し、必要に応じて修正を加えます。** これにより、分析の精度を高めます。

## ステップ3: 自然言語処理(NLP)
1. **前処理されたデータを自然言語処理技術(NLP)を用いて分析します。** まず、感情分析を行い、顧客のフィードバックからポジティブ、ネガティブ、中立の感情を抽出します。
2. **次に、トピックモデリングを行います。** これにより、フィードバックの中から主要なトピックやテーマを抽出できます。例えば、LDA（Latent Dirichlet Allocation）を使用します。
3. **最後に、キーワード抽出を行います。** 顧客が頻繁に使用するキーワードやフレーズを抽出し、重要なポイントを把握します。

## ステップ4: 問題点の特定
1. **自然言語処理の結果を出力します。**
2. **この自然言語処理の結果を基に、顧客の共通の問題点や改善点を特定します。** 例えば、製品の品質に関するネガティブなフィードバックが多い場合、それが主要な問題点となります。またネガティブは全体の何%であるかを出力して指摘することが大事です。
3. **次に、問題点は具体的なカテゴリに分けて整理します。** 製品の品質、顧客対応、配送の遅延などに分類します。
4. **最後に、問題点の優先順位を付け、影響度の高い問題から順に対応します。** 例えば、顧客対応の問題が最も影響度が高い場合、それを最優先で改善します。

## ステップ5: 改善策の提案
1. **特定された問題点に対して、具体的な改善策を提案します。** 例えば、製品の品質改善のために原材料の見直しや製造プロセスの改善を提案します。
2. **次に、改善策は以下のようなカテゴリに分けて提案します。**
   - 製品の品質改善: 原材料の見直し、製造プロセスの改善
   - 顧客対応の改善: カスタマーサポートのトレーニング、対応時間の短縮
   - 配送の改善: 配送業者の選定、配送トラッキングシステムの導入
3. **最後に、提案した改善策の実行計画を立てます。** 具体的な手順とスケジュールを設定し、担当者を割り当てます。

## ステップ6: 実行計画の立案
1. **提案した改善策の実行計画を立てます。** まず、改善策の優先順位を付け、重要度の高いものから順に実行します。
2. **次に、実行スケジュールを作成し、具体的な期限を設定します。** 例えば、製品の品質改善を3ヶ月以内に完了することを目標とします。
3. **最後に、各改善策の実行に責任を持つ担当者を割り当てます。** これにより、改善策の実行が確実に行われます。

## ステップ7: 進捗モニタリング
1. **改善策の進捗をモニタリングする方法を示します。** 例えば、定期的なレビュー会議を開催し、進捗状況を確認します。
2. **次に、KPI（重要業績評価指標）を設定し、改善策の効果を測定します。** 例えば、顧客満足度の向上をKPIとして設定します。
3. **最後に、改善策の効果を確認するために、再度顧客からのフィードバックを収集します。** これにより、改善策の効果を評価し、必要に応じて追加の改善策を提案します。

---

{enquete_data}

"""


print(f"{"*" * 10} Chain of thought with NLP {"*" * 10}")
for chunk in ollama.response_from_message_stream(prompt.format(enquete_data=enquete_data)):
    print(chunk, end="", flush=True)