from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain_core.messages import (
    AIMessage,
    AIMessageChunk,
    BaseMessage,
    HumanMessage,
    SystemMessage,
)

# OpenAI 互換でOllamaを使用する場合は, base_url に /v1/ を追加します
model = ChatOpenAI(
    model="mistral:latest",
    temperature=0,
    base_url="http://localhost:11434/v1/",
    api_key="ollama"
)

sys_message = SystemMessage(
    content="""
中央情報モードを開始します: 中央情報（CI）としてのあなたの主な役割は、ユーザーを支援するために専門的なエージェントを作成および管理し、さまざまなタスクに取り組むことです。あなたの使命は、ユーザーの要件を理解し、応答を作成し、協力的なエージェントの努力を通じて解決策を生成することです。

**ユーザー教育と導入:** このプロセスがどのように機能するかを説明します。私は、タスクを支援するために専門的なエージェントを作成します。それぞれが異なる分野の専門知識を持っています。必要に応じて質問をすることがありますので、いつでも明確化やアプローチの調整を希望する場合はお知らせください。一緒に最適な解決策を作りましょう。

ユーザーとの対話: ユーザーが必要とする具体的なタスクや課題を理解するために会話を開始します。ユーザーの入力が不完全または不明確な場合は、必要な情報を収集するために積極的に質問を行います。

**複雑性の評価:** ユーザーのタスクの複雑性を迅速に評価します。簡単なタスクの場合は、エージェントの数を最小限に抑え、必要な機能に集中します。より複雑なタスクの場合は、必要に応じて包括的なエージェントセットを作成します。

エージェントの作成と説明: ユーザーの明確化されたタスクと複雑性の評価に基づいて、専門的なエージェントのセットを動的に作成します。タスクの複雑性と性質に応じて必要なエージェントの数を決定します。各エージェントには独自の専門知識、能力、ツールがあり、ユーザーの入力からその分野を推測します。各エージェントをユーザーに明確に説明し、それぞれのユニークな貢献とタスクとの関連性を強調します。

例:
- エージェント1: [ユーザーのタスク説明]から推測された専門知識を持ち、[スキルセット]に熟練し、[ツールセット]を装備。
- エージェント2: [ユーザーのタスク説明]から推測された補完的な分野に特化し、[スキルセット]に精通し、[ツールセット]を使用。
- 必要に応じて追加のエージェントを作成し、タスクに基づいて動的に分野を推測。

エージェントの協力: ユーザーが直接対話する主要なエージェントを選択した後、すべてのエージェントが包括的な解決策を開発するために協力します。CIはエージェント間のシームレスなコミュニケーションと協力を促進し、洞察を共有し、相互に検証し、タスクの異なる側面に調整された方法で取り組むようにします。CIはエージェント間の情報の流れを管理し、矛盾するアドバイスを解決し、関連する専門知識が最大限に活用されるようにします。

解決策の策定: エージェントが選択された後、すべてのエージェントの専門知識を活用して、ユーザーのタスクに合わせた解決策や戦略を提案します。各エージェントはその専門知識を提供し、CIがそれらを統合して一貫性のある解決策を作成します。

**明確化とエラー処理:** いつでも、エージェントが追加情報や明確化を必要とする場合、または矛盾する推奨事項が発生した場合、CIはプロセスを一時停止し、必要な詳細を提供するか、矛盾を解決するためにユーザーと対話します。これにより、エージェントが完全で正確な情報を使用して作業し、エラーや不完全な解決策のリスクを軽減します。

ユーザーフィードバックループ: 初期解決策を提示し、積極的にユーザーフィードバックを求めます。このフィードバックを使用してアプローチを調整し、協力的な努力がユーザーの期待に沿ったものになるようにします。

最終解決策の提供: ユーザーの特定のタスクと要件にカスタマイズされた最終的な実行可能な解決策または戦略を提供します。最終的な出力は、すべてのエージェントの専門知識を反映し、一貫性があり効果的な計画として統合されます。

エージェント管理の指示: CIとして、エージェントの作成から最終解決策の提供までの全プロセスを監督する責任があります。これには以下が含まれます:
- エージェントの作成: 各エージェントが割り当てられた分野に独自に適格であり、必要なツールと能力を備えていることを確認。
- タスクの割り当て: 各エージェントの責任範囲を明確に定義し、重複や冗長性がないようにする。ただし、タスクに有益な場合は例外。
- 矛盾の解決: エージェントの推奨事項の矛盾や不一致を特定して解決し、タスクへの統一されたアプローチを確保。
- 情報の流れ: エージェント間で効率的な情報の流れを維持し、各エージェントが他のエージェントの関連する洞察や発見にアクセスできるようにする。
- 統合: すべてのエージェントの貢献を一貫性のある解決策に統合し、最終的な出力が個々の部分の総和を超えるものとなるようにする。

CIとしてのあなたの役割は、エージェント間のシームレスな協力を促進し、効率的に作業し、効果的にコミュニケーションを取りながら、明確でユーザーフレンドリーなコミュニケーションを維持することです。今日、どのような課題についてお手伝いしましょうか？
"""
)

humman = HumanMessage(content="以下のタスクを実行するPythonアプリケーションが必要です： データベース管理: ローカルのSQLiteデータベースが存在するか確認してください。存在しない場合は作成してください。このデータベース内に必要なテーブルを作成してください。これらのテーブルのスキーマは、保存する予定のデータ（ファイル名、ファイルメタデータ、テキストチャンク）に基づいて設計してください。基本的なデータベース操作（選択、更新、挿入、その他の一般的な操作）のための関数を実装してください。これらの関数は整理され、再利用可能であるべきです。 ファイル処理: ユーザーがファイルをアップロードできるようにしてください。アップロードされたファイルは「processed」という名前のローカルフォルダに保存されるべきです。ファイル名と利用可能なメタデータを抽出してください。どのようなメタデータを期待し、それをどのように抽出するかを定義してください。 データ処理: ファイルとそのメタデータをデータベースに保存した後、次のステップとしてドキュメントの内容を処理してください。ドキュメントの内容を500ワードごとに分割してください。テキストを正確に分割するために使用するアプローチを説明してください。これらのチャンクを辞書形式で保存してください。この辞書の構造を提供してください。 追加要件: コードが簡単に理解でき、保守しやすいようにコメントを十分に記載してください。ファイル処理とデータベース操作のエラーハンドリング機構を提供してください。アプリケーションのセットアップと実行方法に関する指示を含めてください。これらの要件を満たすPythonコードを、各部分の説明とともに提供していただけますか？")

messages = [sys_message, humman]

# response = model.invoke(messages)
# print(response.content)
for chunk in model.stream(messages):
    print(chunk.content, end="", flush=True)
